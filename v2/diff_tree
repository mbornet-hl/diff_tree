#!/bin/bash
#
#	@(#)	[MB] aj_diff_tree2	Version 1.7 du 18/04/23 - 
#

usage()
{
	echo "Usage : $PRGM dir1 dir2 [file]"
}

err_exit()
{
	retcode="$1"
	shift
	echo "$PRGM : $@" >&2
	exit "$retcode"
}

clean()
{
	rm "$TMP_LIST1" "$TMP_LIST2"
	rm "$TMP_INFO1" "$TMP_INFO2"
	rm "$AWK_FIFO_IN" "$AWK_FIFO_OUT"
}

list()
{
	find . -type f -print | sed 's|^\./||' | sort -t'|'
}

infos()
{
	if [ "$1" = "" -o "$2" != "" ]; then
		err_exit 126 "infos() : parameters error [$@]"
	fi

	file="$1"

	MD5=`md5sum "$file" | sed 's/[ 	].*$//'`
	SIZE=`stat -c "%s" "$file"`
	DATE_S=`stat -c '%Y' "$file"`
	DATE=`stat -c '%y' "$file" | sed 's/\..*//;s/ /_/'`
}

disp_infos()
{
	IFS_BKP="$IFS"
	IFS="|"
	while read "file"
	do
		infos "$file"
		printf "%s|%d|%s|%d|%s|\n"  "$file" "$SIZE" "$MD5" "$DATE_S" "$DATE"
	done
	IFS="$IFS_BKP"
}

TMP_LIST1="/tmp/list1.$$"
TMP_LIST2="/tmp/list2.$$"

TMP_INFO1="/tmp/info1.$$"
TMP_INFO2="/tmp/info2.$$"

AWK_FIFO_IN="/tmp/awk_FIFO_in.$$"
AWK_FIFO_OUT="/tmp/awk_FIFO_out.$$"

mknod "$AWK_FIFO_IN"  p || err_exit 1 "cannot create FIFO \"$AWK_FIFO_IN\" !"
mknod "$AWK_FIFO_OUT" p || err_exit 1 "cannot create FIFO \"$AWK_FIFO_OUT\" !"

trap 'clean' 1 2 3 10 11 12 15

PRGM=`basename "$0"`
dir1="$1"
dir2="$2"

if [ "$2" = "" -o "$4" != "" ]; then
	usage
	exit 1
fi

if [ "$3" != "" ]; then
	file="$3"
	diff "$dir1/$file" "$dir2/$file"
	exit $?
fi

CWD=`pwd`

# List files in dir1
# ~~~~~~~~~~~~~~~~~~
cd "$dir1" > /dev/null || err_exit 1 "cannot change directory to \"$dir1\" !"
	list > "$TMP_LIST1"
cd "$CWD" > /dev/null

# List files in dir2
# ~~~~~~~~~~~~~~~~~~
cd "$dir2" > /dev/null || err_exit 1 "cannot change directory to \"$dir2\" !"
	list > "$TMP_LIST2"
cd "$CWD" > /dev/null

awk 'BEGIN {
	FIFO_in		= "'"$AWK_FIFO_IN"'";
	FIFO_out		= "'"$AWK_FIFO_OUT"'";

	list1		= "'"$TMP_LIST1"'";
	list2		= "'"$TMP_LIST2"'";

	idx			= 0;

	sz_filename	=  30;
	sz_size		=  10;
	sz_MD5		= -32;
	sz_date		= -19;

	# Read list1
	# ~~~~~~~~~~
	while ((getline < list1) > 0) {
		filename		= $0;
		if (!(filename in idx_filename)) {
			idx_filename[filename]	= idx;
			filename_idx[idx]		= filename;
			idx++;
		}
	}

	# Read list2
	# ~~~~~~~~~~
	while ((getline < list2) > 0) {
		filename		= $0;
		if (!(filename in idx_filename)) {
			idx_filename[filename]	= idx;
			filename_idx[idx]		= filename;
			idx++;
		}
	}

	FS_BKP		= FS;
	FS			= "|";

	# Read info1 and write result in FIFO_out
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	while ((getline < FIFO_in) > 0) {
		$1			= idx_filename[$1];
		printf("%s\n", $0) >> FIFO_out;
	}
	close(FIFO_in);
	close(FIFO_out);

	# Read info2 and write result in FIFO_out
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	while ((getline < FIFO_in) > 0) {
		$1			= idx_filename[$1];
		printf("%s\n", $0) >> FIFO_out;
	}
	close(FIFO_in);
	close(FIFO_out);

	FS			= FS_BKP;
	OFS			= "|";

	# Read result of the join command
	# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	i			= 0;
	while ((getline < FIFO_in) > 0) {
		$1			= filename_idx[$1];
		if (sz_filename < length($1)) {
			# Keep max filename length
			sz_filename	= length($1);
		}

		if ($4 == $5) {
			marker[$1]	= "=";
		}
		else if ($6 < $7) {
			marker[$1]	= ">";
		}
		else if ($6 > $7) {
			marker[$1]	= "<";
		}
		else {
			marker[$1]	= "!";
		}

		record[i++]	= $0;
	}
	close(FIFO_in);
}
END {
	# Display results on stdout
	# ~~~~~~~~~~~~~~~~~~~~~~~~~
	max			= i;
	FS			= "|";
	for (i = 0; i < max; i++) {
		$0		= record[i];
		printf("%s | %-*s | %*s %*s %*s %*s %*s %*s\n",		\
			  marker[$1],								\
			  sz_filename, $1,							\
			  sz_size, $2, sz_size, $3,					\
			  sz_MD5,  $4, sz_MD5,  $5,					\
			  sz_date, $8, sz_date, $9);
	}
}' /dev/null &

# Get infos for files of dir1
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~
cd "$dir1" > /dev/null || err_exit 1 "cannot change directory to \"$dir1\" !"
	cat "$TMP_LIST1" | disp_infos > "$AWK_FIFO_IN" &
	sort "$AWK_FIFO_OUT" > "$TMP_INFO1"
cd "$CWD" > /dev/null

# Get infos for files of dir2
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~
cd "$dir2" > /dev/null || err_exit 1 "cannot change directory to \"$dir2\" !"
	cat "$TMP_LIST2" | disp_infos > "$AWK_FIFO_IN" &
	sort "$AWK_FIFO_OUT" > "$TMP_INFO2"
cd "$CWD" > /dev/null

# Merge files
# ~~~~~~~~~~~
join -a 1 -a 2 -j 1 -e '---' -o '0 1.2 2.2 1.3 2.3 1.4 2.4 1.5 2.5' "$TMP_INFO1" "$TMP_INFO2" > "$AWK_FIFO_IN"

clean
